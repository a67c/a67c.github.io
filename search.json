[{"title":"我们仍未知道那天wda为什么没有被启动","url":"/2018/04/16/我们仍未知道那天wda为什么没有被启动/","content":" 这是一篇废话连篇的佛系记录，本文主要为appium+wda测试app过程中遇到的问题\n\n#### 1.appium报错说明：\n\n```\nurllib2.URLError: <urlopen error [Errno 61] Connection refused>\n```\n该问题为什么会发生至今仍不知道，一方面说是当前appium服务端没有被启动，但是在appium服务端启动之后仍曾经遇到过这个问题，无组织无纪律2%的概率复现。\n\n**当前解决方式:通过增加重试次数重启appium**\n#### 2.socket hang up\n\n```\nCould not proxy command to remote server. Original error: Error: socket hang up\n```\n\nappium服务端挂起，该问题由于appium服务端什么原因导致尚未查明，每隔一段时间总会hang up一次。\n**假装解决方式：选择在python脚本中对其异常进行捕获**\n但是这个问题总是要查的……\n\n#### 3.找不到证书\n\n```\nError: App with bundle identifier 'xxxxxx'\n```\n遇到这个问题一种是真的证书写错了，另一种，在程序执行了好久后报这个错误那就非常奇怪了……奇怪到至今也没有查到这个问题，但可以确定的是，随着mac连接设备不再频繁掉设备后，这个问题也逐渐减少了。\n\n\n#### 4.找不到设备\n\n```\n Message: An unknown server-side error occurred while processing the command. Original error: Unknown device or simulator UDID: 'balabalabalalbas'\n```\n大意就是找不到设备，尤其是在程序执行一段时间后失败了，失败原因找不到设备，就好像之前执行的一个小时都在闹着玩一样。\n此时ituns会弹出各种弹框：eg'当前找不到该设备' ‘无法像该设备传输信息’\n所以简单粗暴的认为是设备掉线了，后来更换了HUB之后，该问题果然减少了！**更换HUB**之后连带着找不到证书的问题也**果然**减少了！\n\n#### httplib.BadStatusLine\n\n```\nraise BadStatusLine(line) httplib.BadStatusLine: ''\n```\n网上查说是你的python请求中断啊，但是为什么会中断！网络好好的，什么都好好的，后来终于确定了现场，那就是报出该问题时99%是app证书没有被信任，暂定就破案吧。\n\n#### 5.Too many instances\n\n```\n Too many instances of this services are already running\n```\n如果你的appium日志经常阵亡在wda启动时，满屏都是wda报错的日志时，不妨从xcodebuild中启动一下wda，经常会出现这个错误！除了重启手机别无它法。\n\n#### 6.A session is either terminated or not started\n```\nWebDriverException: Message: A session is either terminated or not started\n```\n大概就是当前的session已经停止了，再去连接是连接不上的，捕获到这种异常后，进行了appium重新请求，即重新建立appium与wda，wda与手机的session\n\n#### 7.wda没有启动\n\n```\nWebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: An error occurred\n```\nelement找不到，当前发送的命令webdriver中没有，都可能导致这个问题\n\n\n#### 8.xcodebuild65\n这个问题范围太广了，wda没有启动成功时，基本是成片的'xcodebuild 65'\n且如果你上次执行失败导致xcodebuild65 and wda remove，之后的执行基本也是失败的。此时主要是通过xcodebuild重启wda来尽量避免成片出现这种错误。\n当前可以确定的是：\n手机弹出未安装sim卡，手机弹出alertView弹窗，手机未被信任都会阻止wda的启动。\n重启手机，通过xcodebuild重启wda可以有效减少此类问题发生，但是可能不能避免。\n\n#### 总结\n重启手机、重启wda、避免手机电量不足而导致重新信任电脑、增加appium启动重试次数、更换硬件设备、对于异常进行捕获而非抛出，大概就是以上要表达的全部意思。","tags":["Appium"]},{"title":"Appium通过日志分析服务端执行过程-IOS端","url":"/2018/02/22/Appium通过日志分析服务端执行过程-IOS端/","content":"\n#### 写在前面\n1. 本文日志为在IOS模拟器上进行的测试 appium 1.7.2\n2. 在appium服务端中，日志分为log.info和log.debug 一般每个文件夹下面都有logger.js 该js中规定当前log格式。\n3. info为基础信息，debug可以看做为调试信息。\n4. 本篇为初步分析，后来对日志又进行了更细致的断点查找，待整理，如有错误还请指出\n5. 假如日志前面打印出的[Appium][XUCITES]等，根据该名字可以查到日志来源于哪个文件夹下，[debug][MJSONWP]代表当前是采用log.debug方式打印日志，且日志来源于`appium-base-driver/mjsonwp`的文件夹\n\n#### 第一部分 启动服务并创建sessionID\nappium启动：\n```\n[Appium] Welcome to Appium v1.7.2\n[Appium] Appium REST http interface listener started on 0.0.0.0:4723\n```\n客户端发送http请求，并传递配置参数\n```\n[HTTP] --> POST /wd/hub/session {\"capabilities\":{\"alwaysMatch\":{\"platformName\":\"iOS\"},\"firstMatch\":[{}]},\"desiredCapabilities\":{\"platformVersion\":\"11.2\",\"deviceName\":\"iPhone 6s\",\"app\":\"/Users/用户名/Documents/github/python-client-master/appium/TestApp/build/release-iphonesimulator/TestApp-iphonesimulator.app\",\"platformName\":\"iOS\"}}\n```\n[MJSONWP]为来自于appium服务端中封装好的类库`appium-base-driver`中mjsonwp文件夹下的mjsonwp.js，一般用于server端的交互，包括处理HTTP的请求，session会话的创建删除。以下为创建Session\n```\n[debug] [MJSONWP] Calling AppiumDriver.createSession() with args: [{\"platformVersion\":\"11.2\",\"deviceName\":\"iPhone 6s\",\"app\":\"/Users/用户名/Documents/github/python-client-master/appium/TestApp/build/release-iphonesimulator/TestApp-iphonesimulator.app\",\"platformName\":\"iOS\"},null,{\"alwaysMatch\":{\"platformName\":\"iOS\"},\"firstMatch\":[{}]}]\n```\n[BaseDriver]日志来源于`appium-base-driver/basedriver`文件夹。\n下面日志主要用于打印整个appium中的事件触发，所有的请求都会触发各种类下的`executeCommand`函数，而这些函数全部继承driver.js中的WebDriver，所以所有的请求都会打印出`driver.js`中的logHistory。\n```\n[debug] [BaseDriver] Event 'newSessionRequested' logged at 1516514435268 (14:00:35 GMT+0800 (CST))\n ```\n[Appium]日志来源于`lib`文件夹下\n```\n[Appium] Merged W3C capabilities {\"alwaysMatch\":{\"platformName\":\"iOS\"},\"firstMat... into desiredCapabilities object {\"platformVersion\":\"11.2\",\"deviceName\":\"iPhone ...\n[Appium] Requested iOS support with version >= 10, using XCUITest driver instead of UIAutomation-based driver, since the latter is unsupported on iOS 10 and up.\n[Appium] Creating new XCUITestDriver (v2.64.0) session\n[Appium] Capabilities:\n[Appium]   platformVersion: 11.2\n[Appium]   deviceName: iPhone 6s\n[Appium]   app: /Users/用户名/Documents/github/python-client-master/appium/TestApp/build/release-iphonesimulator/TestApp-iphonesimulator.app\n[Appium]   platformName: iOS\n```\n[BaseDriver]打印出当前sessionId创建成功，来源于`appium-base-driver/basedriver/session.js`文件。\n\n* creatSession跳转过程说明：\n创建creatSession路线：mjsonwp.js-》appium.js中的createSession-》跳转到XCUITEST中的createSession-》跳转到appium-base-driver/basedriver/driver.js中的creatSession\n* 如何联系起了XCUITest？\n通过appium.js中的`curSessionDataForDriver(InnerDriver)`，当判断出当前是什么系统配置时，InnerDriver此时已变成IOS或者Android的Driver\n\n```\n[BaseDriver] Session created with session id: 8790f1db-9627-41ce-a534-bc40159c7194\n```\n当创建SessionID之后，此时进入的是`appium-xcuitest-driver`类库中。\n```\n[debug] [XCUITest] Current user: '用户名'\n[debug] [XCUITest] Current version of libimobiledevice: stable 1.2.0 (bottled), HEAD\n[debug] [XCUITest] Xcode version set to '9.2' (tools v9.2.0.0.1.1510905681)\n[debug] [XCUITest] iOS SDK Version set to '11.2'\n```\n来自于`appium-base-driver/basedriver/driver.js`中的logHistory函数\n```\n[debug] [BaseDriver] Event 'xcodeDetailsRetrieved' logged at 1516514436354 (14:00:36 GMT+0800 (CST))\n```\n[iOSSim]来自于`appium-ios-simulator`的日志，接下来都是在IOS检测模拟器，判断APP，安装APP的操作\n```\n[iOSSim] Constructing iOS simulator for Xcode version 9.2 with udid '2EF911A2-CA9C-4D28-96EB-3DBC8DF39FA5'\n[XCUITest] Determining device to run tests on: udid: '2EF911A2-CA9C-4D28-96EB-3DBC8DF39FA5', real device: false\n[BaseDriver] Using local app '/Users/用户名/Documents/github/python-client-master/appium/TestApp/build/release-iphonesimulator/TestApp-iphonesimulator.app'\n[debug] [BaseDriver] Event 'appConfigured' logged at 1516514436692 (14:00:36 GMT+0800 (CST))\n[debug] [XCUITest] Checking whether app '/Users/用户名/Documents/github/python-client-master/appium/TestApp/build/release-iphonesimulator/TestApp-iphonesimulator.app' is actually present on file system\n[debug] [XCUITest] App is present\n[debug] [iOS] Getting bundle ID from app '/Users/用户名/Documents/github/python-client-master/appium/TestApp/build/release-iphonesimulator/TestApp-iphonesimulator.app': 'io.appium.TestApp'\n[debug] [BaseDriver] Event 'resetStarted' logged at 1516514436695 (14:00:36 GMT+0800 (CST))\n[XCUITest] Not scrubbing third party app in anticipation of uninstall\n[debug] [BaseDriver] Event 'resetComplete' logged at 1516514436881 (14:00:36 GMT+0800 (CST))\n[debug] [XCUITest] Starting log capture for iOS Simulator with udid '2EF911A2-CA9C-4D28-96EB-3DBC8DF39FA5', using 'xcrun simctl spawn 2EF911A2-CA9C-4D28-96EB-3DBC8DF39FA5 log stream --style compact'\n[debug] [BaseDriver] Event 'logCaptureStarted' logged at 1516514437312 (14:00:37 GMT+0800 (CST))\n[XCUITest] Setting up simulator\n[debug] [iOS] No reason to set locale\n[debug] [iOS] No iOS / app preferences to set\n[debug] [iOSSim] Matched 1 Simulator cache item for cleanup: /Users/用户名/Library/Developer/CoreSimulator/Devices/2EF911A2-CA9C-4D28-96EB-3DBC8DF39FA5/data/Library/Caches/com.apple.mobile.installd.staging\n[debug] [iOSSim] Setting common Simulator preferences to {\"ConnectHardwareKeyboard\":false}\n[debug] [iOSSim] Updated 2EF911A2-CA9C-4D28-96EB-3DBC8DF39FA5 Simulator preferences at '/Users/用户名/Library/Preferences/com.apple.iphonesimulator.plist' with {\"ConnectHardwareKeyboard\":false}\n[debug] [iOSSim] The count of running Simulator UI client instances is 1\n[iOSSim] Both Simulator with UDID 2EF911A2-CA9C-4D28-96EB-3DBC8DF39FA5 and the UI client are currently running\n[debug] [BaseDriver] Event 'simStarted' logged at 1516514437783 (14:00:37 GMT+0800 (CST))\n[debug] [XCUITest] Reset requested. Removing app with id 'io.appium.TestApp' from the device\n[debug] [XCUITest] Installing '/Users/用户名/Documents/github/python-client-master/appium/TestApp/build/release-iphonesimulator/TestApp-iphonesimulator.app' on Simulator with UUID '2EF911A2-CA9C-4D28-96EB-3DBC8DF39FA5'...\n[debug] [XCUITest] The app has been installed successfully.\n[debug] [BaseDriver] Event 'appInstalled' logged at 1516514440337 (14:00:40 GMT+0800 (CST))\n```\nAPP安装成功之后开始处理WDA\n```\n[XCUITest] Using WDA path: '/usr/local/lib/node_modules/appium/node_modules/appium-xcuitest-driver/WebDriverAgent'\n[XCUITest] Using WDA agent: '/usr/local/lib/node_modules/appium/node_modules/appium-xcuitest-driver/WebDriverAgent/WebDriverAgent.xcodeproj'\n[debug] [XCUITest] No obsolete cached processes from previous WDA sessions listening on port 8100 have been found\n[debug] [JSONWP Proxy] Proxying [GET /status] to [GET http://localhost:8100/status] with no body\n[debug] [JSONWP Proxy] Got response with status 200: \"{\\n  \\\"value\\\" : {\\n    \\\"state\\\" : \\\"success\\\",\\n    \\\"os\\\" : {\\n      \\\"name\\\" : \\\"iOS\\\",\\n      \\\"version\\\" : \\\"11.2\\\",\\n      \\\"sdkVersion\\\" : \\\"11.2\\\"\\n    },\\n    \\\"ios\\\" : {\\n      \\\"simulatorVersion\\\" : \\\"11.2\\\",\\n      \\\"ip\\\" : \\\"192.168.0.102\\\"\\n    },\\n    \\\"build\\\" : {\\n      \\\"time\\\" : \\\"Jan 14 2018 23:25:10\\\"\\n    }\\n  },\\n  \\\"sessionId\\\" : \\\"17DE3FB9-3196-4C9C-9D55-3BFFDD0C1DEB\\\",\\n  \\\"status\\\" : 0\\n}\"\n[XCUITest] Will reuse previously cached WDA instance at 'http://localhost:8100/'. Set the wdaLocalPort capability to a value different from 8100 if this is an undesired behavior.\n[debug] [BaseDriver] Event 'wdaStartAttempted' logged at 1516514440422 (14:00:40 GMT+0800 (CST))\n[XCUITest] Using provided WebdriverAgent at 'http://localhost:8100/'\n[debug] [BaseDriver] Event 'wdaSessionAttempted' logged at 1516514440423 (14:00:40 GMT+0800 (CST))\n[debug] [XCUITest] Sending createSession command to WDA\n```\n在XCUITest中开启WDA之后，此时链接的request和response进入了  `appium-base-driver/lib/jsonwp-proxyproxy.js` ，这个js主要是做S/D的链接，即server服务端与devices设备的链接\n```\n[debug] [JSONWP Proxy] Proxying [GET /status] to [GET http://localhost:8100/status] with no body\n[debug] [JSONWP Proxy] Got response with status 200: \"{\\n  \\\"value\\\" : {\\n    \\\"state\\\" : \\\"success\\\",\\n    \\\"os\\\" : {\\n      \\\"name\\\" : \\\"iOS\\\",\\n      \\\"version\\\" : \\\"11.2\\\",\\n      \\\"sdkVersion\\\" : \\\"11.2\\\"\\n    },\\n    \\\"ios\\\" : {\\n      \\\"simulatorVersion\\\" : \\\"11.2\\\",\\n      \\\"ip\\\" : \\\"192.168.0.102\\\"\\n    },\\n    \\\"build\\\" : {\\n      \\\"time\\\" : \\\"Jan 14 2018 23:25:10\\\"\\n    }\\n  },\\n  \\\"sessionId\\\" : \\\"17DE3FB9-3196-4C9C-9D55-3BFFDD0C1DEB\\\",\\n  \\\"status\\\" : 0\\n}\"\n[debug] [JSONWP Proxy] Proxying [POST /session] to [POST http://localhost:8100/session] with body: {\"desiredCapabilities\":{\"bundleId\":\"io.appium.TestApp\",\"arguments\":[],\"environment\":{},\"shouldWaitForQuiescence\":true,\"shouldUseTestManagerForVisibilityDetection\":false,\"maxTypingFrequency\":60,\"shouldUseSingletonTestManager\":true}}\n[debug] [JSONWP Proxy] Got response with status 200: {\"value\":{\"sessionId\":\"95403F32-CD9B-4A0E-AA89-4BE9C899FBBC\",\"capabilities\":{\"device\":\"iphone\",\"browserName\":\"TestApp\",\"sdkVersion\":\"11.2\",\"CFBundleIdentifier\":\"io.appium.TestApp\"}},\"sessionId\":\"95403F32-CD9B-4A0E-AA89-4BE9C899FBBC\",\"status\":0}\n[debug] [BaseDriver] Event 'wdaSessionStarted' logged at 1516514443103 (14:00:43 GMT+0800 (CST))\n[debug] [BaseDriver] Event 'wdaStarted' logged at 1516514443103 (14:00:43 GMT+0800 (CST))\n[XCUITest] Skipping setting of the initial display orientation. Set the \"orientation\" capability to either \"LANDSCAPE\" or \"PORTRAIT\", if this is an undesired behavior.\n[debug] [BaseDriver] Event 'orientationSet' logged at 1516514443103 (14:00:43 GMT+0800 (CST))\n```\n上边WDA开启完毕，session创建成功，这个session的创建过程是从\n\n**mjsonwp.js（HTTP请求入口）-》appium.js中的createSession-》跳转到XCUITEST中的createSession-》跳转到appium-base-driver/basedriver/driver.js中的creatSession   创建成功之后回到了appium.js中将log打印，最后回到了mjsonwp.js将response返回并通知。**\n\n\n```\n[Appium] New XCUITestDriver session created successfully, session 8790f1db-9627-41ce-a534-bc40159c7194 added to master session list\n[debug] [BaseDriver] Event 'newSessionStarted' logged at 1516514443104 (14:00:43 GMT+0800 (CST))\n[debug] [MJSONWP] Responding to client with driver.createSession() result: {\"webStorageEnabled\":false,\"locationContextEnabled\":false,\"browserName\":\"\",\"platform\":\"MAC\",\"javascriptEnabled\":true,\"databaseEnabled\":false,\"takesScreenshot\":true,\"networkConnectionEnabled\":false,\"platformVersion\":\"11.2\",\"deviceName\":\"iPhone 6s\",\"app\":\"/Users/用户名/Documents/github/python-client-master/appium/TestApp/build/release-iphonesimulator/TestApp-iphonesimulator.app\",\"platformName\":\"iOS\",\"udid\":\"2EF911A2-CA9C-4D28-96EB-3DBC8DF39FA5\"}\n[HTTP] <-- POST /wd/hub/session 200 7841 ms - 515\n```\n---------\n#### 第二部分 发送操作请求执行并返回\n\n客户端传来请求获取element，该请求进入mjsonwp.js进行处理，通过executeCommand函数进入appium.js 进入appium-xcuitest-driver‘类库 与JSONWP Proxy[appium-base-driver/lib/jsonwp/proxy.js]进行协议交互  交互结果返回MJSONWP[appium-base-driver/lib/mjsonwp/mjsonwp.js]\n```\n[HTTP] --> POST /wd/hub/session/8790f1db-9627-41ce-a534-bc40159c7194/element {\"using\":\"accessibility id\",\"sessionId\":\"8790f1db-9627-41ce-a534-bc40159c7194\",\"value\":\"TextField1\"}\n[debug] [MJSONWP] Calling AppiumDriver.findElement() with args: [\"accessibility id\",\"TextField1\",\"8790f1db-9627-41ce-a534-bc40159c7194\"]\n[debug] [XCUITest] Executing command 'findElement'\n[debug] [BaseDriver] Valid locator strategies for this request: xpath, id, name, class name, -ios predicate string, -ios class chain, accessibility id\n[debug] [BaseDriver] Waiting up to 0 ms for condition\n[debug] [JSONWP Proxy] Proxying [POST /element] to [POST http://localhost:8100/session/95403F32-CD9B-4A0E-AA89-4BE9C899FBBC/element] with body: {\"using\":\"accessibility id\",\"value\":\"TextField1\"}\n[debug] [JSONWP Proxy] Got response with status 200: {\"value\":{\"ELEMENT\":\"A3063789-1A9E-4FA2-A645-F2E257F0BB30\"},\"sessionId\":\"95403F32-CD9B-4A0E-AA89-4BE9C899FBBC\",\"status\":0}\n[debug] [MJSONWP] Responding to client with driver.findElement() result: {\"ELEMENT\":\"A3063789-1A9E-4FA2-A645-F2E257F0BB30\"}\n[HTTP] <-- POST /wd/hub/session/8790f1db-9627-41ce-a534-bc40159c7194/element 200 83 ms - 122\n```\n客户端再次传来请求，以下都是重复请求与返回，直到客户端传来删除会话。\n当客户端单个任务执行完毕时，客户端传来删除会话，通讯与其它没有什么差别。\n```\n[HTTP] --> DELETE /wd/hub/session/5469f63c-9b2b-4a3a-bbdb-fa26bd6315f9 {}\n[debug] [MJSONWP] Calling AppiumDriver.deleteSession() with args: [\"5469f63c-9b2b-4a3a-bbdb-fa26bd6315f9\"]\n[debug] [BaseDriver] Event 'quitSessionRequested' logged at 1516514455122 (14:00:55 GMT+0800 (CST))\n[Appium] Removing session 5469f63c-9b2b-4a3a-bbdb-fa26bd6315f9 from our master session list\n[debug] [JSONWP Proxy] Proxying [DELETE /session/5469f63c-9b2b-4a3a-bbdb-fa26bd6315f9] to [DELETE http://localhost:8100/session/E9944FDA-46DC-48B4-824B-A2C99D0B3BD2] with no body\n[debug] [JSONWP Proxy] Got response with status 200: \"{\\n  \\\"value\\\" : {\\n\\n  },\\n  \\\"sessionId\\\" : \\\"334D0B8A-6B9E-4BAA-9BDA-BFEE66EBB584\\\",\\n  \\\"status\\\" : 0\\n}\"\n[debug] [XCUITest] Not clearing log files. Use `clearSystemFiles` capability to turn on.\n[debug] [iOSLog] Stopping iOS log capture\n[debug] [BaseDriver] Event 'quitSessionFinished' logged at 1516514455352 (14:00:55 GMT+0800 (CST))\n[debug] [MJSONWP] Received response: null\n[debug] [MJSONWP] But deleting session, so not returning\n[debug] [MJSONWP] Responding to client with driver.deleteSession() result: null\n[HTTP] <-- DELETE /wd/hub/session/5469f63c-9b2b-4a3a-bbdb-fa26bd6315f9 200 231 ms - 76\n\n```","tags":["Appium"]},{"title":"Appium在vscode中调试说明","url":"/2018/02/22/appium在vscode中调试说明/","content":"#### 需求说明\n要对appium的源码进行调试，如果选择全局安装的难免会在调试过程中破坏原代码，因此从github上面拉下了master分支的代码进行调试   [github代码：](https://github.com/appium/appium.git)\n\n#### 环境说明：\nvscode \n\nappium 1.7.2\n\nmac\n\n#### 安装appium\n\n要使拽下来的代码达到可运行状态，需要执行`npm install`但是这个安装过程中如果出现下载不成功的问题，原因可能是没有翻墙，导致无法下载chromedriver,因此建议翻箱后重新`npm install`\n\n#### 调试文件配置\n在vscode中打开appium所在的文件夹，要在debug时对vscode的launch.json进行配置,关于它的debug流程官网地址[https://code.visualstudio.com/docs/editor/debugging](https://code.visualstudio.com/docs/editor/debugging)介绍的比较详细，我用的launch.json配置如下：\n```launch.json\n{\n    // 使用 IntelliSense 了解相关属性。 \n    // 悬停以查看现有属性的描述。\n    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n\n        {\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"name\": \"Launch Program\",\n            \"program\": \"${workspaceFolder}/build/lib/main.js\",//package.json中的默认入口\n            \"console\" : \"integratedTerminal\"  //控制台信息的显示\n        }\n    ]\n}\n```\n#### 运行\n\n调试文件运行好后，就可以在debug中运行按钮启动appium了，启动后就可以打断点进行调试了。\n\n#### 修改代码\n\n在appium调试过程中发现，文件夹中会有build和其它文件夹，而入口文件一般都在build文件夹下，可是build文件夹中的代码又是被转换过的，我们如果在非build文件下更改又不会生效，那么这个时候要怎么办呢？\n\n首先说原因，appium是用nodejs写成的，其中用了js的一些新特性，不能被直接识别执行，因此需要通过babel将代码转换一下，因此转换前的代码在lib中，转换后的代码在build中，appium及其所有的类库都是这样的方式，转换时用的打包工具是gulp。\n\n由于执行的是build中的文件，而我们改代码都在转换前的文件夹lib下，所以需要对修改的代码进行打包。\n进入gulpfiles.js所在的文件夹下，执行\n```\nnpm run build\n```\n就可以将代码修改了。\n\n有时候调试代码时需要涉及到在node_modules\n中的`appium-base-driver`,`appium-xcuitest-driver`,`appium-android-driver`等各种类库中修改，这就需要我们在每一个类库中修改后都要进行打包,目前还没有找到gulp在node中的中间件，就是全部都打包的那种，之前只用过webpack的中间件，如果有小伙伴知道怎么在执行node时用gulp全部打包一下，还请告知哈。\n\n\n","tags":["Appium环境搭建"]},{"title":"Appium源码目录说明","url":"/2018/01/29/Appium源码目录说明/","content":"Appium版本 1.7.2\nAppium源码主要由appium的入口文件js及一些引用的基础类库组成，以下举例说明源码目录大致功能，对于类库以appium-base-driver为例，类库中源码整体结构基本一致。\n#### appium文件夹下内容\n\n```\n├── AUTHORS\n├── CHANGELOG.md\n├── CONDUCT.md\n├── CONTRIBUTING.md\n├── GOVERNANCE.md\n├── IDEAS.md\n├── LICENSE\n├── README.md\n├── RELEASE.pdf\n├── ROADMAP.md\n├── build//打包后生成的文件夹\n├── node_modules//引用的类库文件夹\n├── docs//文档文件夹\n├── commands-yml//文档相关文件夹\n├── bin\n│   └── ios-webkit-debug-proxy-launcher.js\n├── gulpfile.js//程度打包文件\n├── lib//主程序执行入口\n│   ├── appium.js //\n│   ├── config.js//基础配置相关\n│   ├── grid-register.js\n│   ├── logger.js//日志\n│   ├── logsink.js//日志\n│   ├── main.js //程序执行入口\n│   ├── parser.js //appium终端命令相关js\n│   └── utils.js//基础类库\n├── npm-shrinkwrap.json\n├── package.json\n├── packweb.json\n└── triagers.json\n```\n#### 基础类库appium-base-driver\n```\n├── LICENSE\n├── README.md\n├── build//打包后生成的文件夹\n├── node_modules//引用的类库文件夹\n├── docs//文档文件夹\n├── gulpfile.js//gulp打包文件\n├── index.js//程序入口\n├── lib//主要执行代码文件夹\n│   ├── basedriver\n│   │   ├── README.md\n│   │   ├── capabilities.js//配置文件\n│   │   ├── commands\n│   │   │   ├── find.js\n│   │   │   ├── index.js\n│   │   │   ├── session.js//客户端与服务端创建sessionId\n│   │   │   ├── settings.js\n│   │   │   └── timeout.js\n│   │   ├── desired-caps.js\n│   │   ├── device-settings.js\n│   │   ├── driver.js//基础类库\n│   │   ├── helpers.js\n│   │   └── logger.js\n│   ├── express\n│   │   ├── README.md\n│   │   ├── crash.js\n│   │   ├── express-logging.js\n│   │   ├── logger.js\n│   │   ├── middleware.js//中间件\n│   │   ├── server.js//appium服务启动\n│   │   └── static.js\n│   ├── jsonwp-proxy\n│   │   ├── README.md\n│   │   └── proxy.js//服务端与设备端通信\n│   ├── jsonwp-status\n│   │   ├── README.md\n│   │   └── status.js//遵循json wire protocal的code返回值 \n│   └── mjsonwp\n│       ├── README.md\n│       ├── errors.js\n│       ├── helper.js\n│       ├── index.js\n│       ├── mjsonwp.js//接收客户端res并返回res\n│       ├── routes.js//路由配置\n│       ├── validators.js//参数验证\n├── package-lock.json\n├── package.json\n├── static//静态资源\n└── test//测试用例\n```","tags":["Appium"]},{"title":"基于源码分析Appium服务端启动过程","url":"/2018/01/18/基于源码分析Appium服务端启动过程/","content":"#### 写在前面\n\n本文档主要是通过断点跟踪对于Appium源码，从而记录的Appium服务端的启动过程，如有错误或者理解不当之处，欢迎评论提出。\nAppium版本：1.7.2 客户端  appium-python-client  2018年1月\n可以直接看结论，根据结论中的关键js文件即可断点跟踪出全过程。\n\n#### appium文档\n\n[github](https://github.com/appium)\n\n[官方网站](http://appium.io/)\n\n### 主体结构\n\n![官方图片](http://upload-images.jianshu.io/upload_images/1094385-50476463c0d726b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n首先是官方这张图片，这张图片简直涵盖appium所有知识点！而且对于这张图片还有中文的readme！\n[中文readme直通车](https://github.com/appium/appium/blob/master/docs/cn/contributing-to-appium/appium-packages.md)  \n图上分类很清晰 基本上以appium为前缀的都被封装成了类库，通过npm加载，在node_modules中如下图所示，其中appium-base-driver为整个服务的基础类库。上图所示的 `jsonwp-proxy`、`mobile-json-wire-protocal`等都在里面。\n![image.png](http://upload-images.jianshu.io/upload_images/1094385-aba2f76c6e89ea0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### node的express\nappium的服务端采用的是express框架，[express中文文档](http://www.expressjs.com.cn/)，如果之前用express建立过项目的话，会对express中的路由比较熟悉，很多时候路由的处理大概像[Appium源码分析(3)-路由器模块](http://blog.csdn.net/itfootball/article/details/44707431)这样列出来的样子，即通过`rest.get('/wd/hub/status', controller.getStatus);`该种方式可以查看到所有路由的处理，但是到今年18年appium的代码它的路由配置经过了层层调用。\n\n而且作为node服务之前比较习惯入口的app.js即作为服务开启，但是在appium中它将该入口作为express模块直接放在了`appium-base-driver`中，也就是说appium源码的main入口并不是服务入口，那么他们之间的关系是一个怎样的继承及调用呢？\n\n### 源码目录分析\n假设我们想实现一个与客户端通讯的服务，那么主要包括服务开启、客户端http请求，响应函数，那么在appium中我们将其细化一下，大概是\n>开启服务->客户端传来请求->开启当前测试用例会话->根据配置确定ios、android等->分别处理ios或安卓请求->ios或安卓返回后->响应客户端吧->关闭会话。\n\n首先看入口结构：\n\n![WX20180118-194031.png](http://upload-images.jianshu.io/upload_images/1094385-3dfc475124e93591.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n* build工程打包后出现的文件 程序执行来源于build中的main.js ,基本是对lib文件夹下通过babel对于代码进行的转换，所以调试的时候建议根据main.js调试\n* config.js 配置文件\n* logger.js 日志处理\n* parser.js 终端命令的处理\n* utils.js 基础函数\nmain.js 中除了启动的一些检查，重点代码在于\n```\nimport { server as baseServer } from 'appium-base-driver';\nlet router = getAppiumRouter(args);//该函数来源于appium.js\n  //此处router返回的是个函数  用于装填路由路径 该函数执行路径位于/mjsonwp/mjsonwp.js 中routeConfiguringFunction 的返回函数\n  //baseServer执行之后服务开始启动\nlet server = await baseServer(router, args.port, args.address);\n```\n这两行代码可nb厉害了……就这两行基本就把基础类库溜了一圈！代码都是几行几行的，然后一调就转一大圈\n在appium.js中我们找到了以下函数\n```\nimport { BaseDriver, routeConfiguringFunction, errors,\n         isSessionCommand, processCapabilities } from 'appium-base-driver';\n\nfunction getAppiumRouter (args) {\n  let appium = new AppiumDriver(args);//实例化的这个类继承了appium-base-driver！\n  return routeConfiguringFunction(appium);//这个函数来自于appium-base-driver \n}\n```\n由此成功引入基础类库`appium-base-driver`，然后就去那里翻吧\n#### 基础类库appium-base-driver\n![没截全的地方都是配置](http://upload-images.jianshu.io/upload_images/1094385-7201454a76fa3ac1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n画出的几个红框基本就是代码功能分类，其中`jsonwp-proxy`和`mjsonwp`是和协议相关，由于我不是很了解，所以不做介绍，只说明其中代码位置。\n上边提到代码转向`routeConfiguringFunction `\n\n#### routeConfiguringFunction\n这出自`mjsonwp/mjsonwp.js`，**请牢牢的记住这个返回函数！！！**\n```\nfunction routeConfiguringFunction (driver) {\n//...省略一些\n  // return a function which will add all the routes to the driver\n  return function (app) {\n    for (let [path, methods] of _.toPairs(METHOD_MAP)) {\n      for (let [method, spec] of _.toPairs(methods)) {\n        // set up the express route handler\n        buildHandler(app, method, path, spec, driver, isSessionCommand(spec.command));\n      }\n    }\n  };\n}\n```\n它返回了一个函数并且里面还传参了`app`,之前断点打到这里时满脑子都是**我是谁，我在哪里，我要干什么**\n我们把代码往上看一下`routeConfiguringFunction`的返回值返回给`getAppiumRouter `再返回给let router  然后再传给baseServer（怪我不好好学js……看个代码艰辛非常……）\n那么baseServer来自哪里呢？看import，它来自appium-base-server!\n**main.js中调用了一圈再次进入appium-base-server**\n\n#### express中的server.js\n之前说到要去找baseServer来自哪里，终于在express/server.js中找到了  就是appium的http服务启动的地方！所以说服务开启的地方不在外部！在基础类库里啊！\n```\nasync function server (configureRoutes, port, hostname = null) {\n//......\n//里面有这样的代码\nconfigureServer (app, configureRoutes) {\n//然后再该函数中调用了\n  configureRoutes(app);\n}\n```\n所以代码走到这里执行的就是那个返回函数，app是express的实例！那么执行这一步是为了做什么呢？这个`METHOD_MAP`是最大的全路由配置！来自于`mjsonwp/routes.js`,其中500行都是路由配置，经过该配置有效避免批量写`app.get()//balabala`\n```\n\nfunction (app) {\n  for (let [path, methods] of _.toPairs(METHOD_MAP)) {\n  //balabalbala\n }\n```\n至此全路由配置装填结束！\n\n#### 服务启动\n这个就没有什么波折了，既然server.js都找到了，就再这个文件中,看到这里终于看到了熟悉的node启动~\n```\nlet app = express();\nlet httpServer = http.createServer(app);\n```\n当断点跟到这里时终端就可以跳出如下输出,服务启动啦~\n```\n[Appium] Appium REST http interface listener started on 0.0.0.0:4723\n```\n### 总结\n\n启动服务执行过程\n`lib/main.js` 执行来自于`lib/appium.js`中的`getAppiumRouter`函数\n该函数中实例化`AppiumDriver`类，同时读取路由配置文件，该类继承于`Appium-base-driver`库中暴露的基类，路由配置文件来源于`Appium-base-driver`库中`/mjsonwp/routes.js`的配置\n配置文件读取之后在`/mjsonwp/mjsonwp.js`中以函数的形式返回`main.js ` 执行`baseServer`函数  该函数来自于`Appium-base-driver/express/server.js`\n\n也就是说整个过程从\n>main.js-[调用]-appium.js-[调用]-appium-base-driver/mjsonwp-[返回]-main.js-[调用]-appium-base-driver/express\n\n其实是通过层层调用将路由已配置的方式进行装填并在基础类库`appium-base-server`中启动\n\n\n\n","tags":["Appium"]},{"title":"关于Appium在安卓上频繁安装unlock、setting.apk的问题查找记录","url":"/2018/01/18/关于Appium在安卓上频繁安装unlock、setting.apk的问题查找记录/","content":"\n\n#### 总结\n\n该问题已经被官方在1.7.x的版本中进行修复。以下为对于该问题的查找记录\n#### 1.6.x版本说明\n\n在appium1.6.x版本中 每次进行安卓用例测试时 appium都会安装unlock.app、setting.app、ime.app\n\n关于这个的解决方式可参考如下blog\n\n[appium解决每次运行都需要安装Unlock以及AppiumSetting的问题](http://blog.csdn.net/hszxd479946/article/details/78900982)\n\n或者在appium设计到该处问题的源码位置，将其添加判断以上app是否安装的逻辑即可\n\n#### 1.7.x版本说明\n当前npm版本为1.7.2版本，官方已经修复了这个问题，在1.7.2的[changeLog](https://github.com/appium/appium/blob/master/CHANGELOG.md)中说明如下：\n![image.png](http://upload-images.jianshu.io/upload_images/1094385-b33ef73da19de461.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240);\n\n由于这个问题设计到的代码在appium-android-driver这个封装好的组件中，所以具体看一下是什么时候更改的,是在17年10月份的这次代码提交中修复了该问题。\n\n从commit继续往下看，9月份这里也进行过改动，但是10月份改动之后与当前npm版本是一致的。\n[Fix handling of settings and unlock app pushing](https://github.com/appium/appium-android-driver/commit/033b70e75fcada83ff2e73e99d9c605c59b35621)\n![image.png](http://upload-images.jianshu.io/upload_images/1094385-8827acf34ec14ae1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n对于installOrUpgrade这个函数，它的定义在封装好的android-adb类库里面，那么接下来去这里看一下对于这个函数的更改。\n\n[android-adb commit](https://github.com/appium/appium-adb/commit/404455cf43e1f0086fa30d1ff6675f216f2e5a73)\n\n这个函数同样进行了两次更改，在9月份的更改中采用了外部传参的方式判断是否安装但是在10月份的commit中又去掉了外部传参的参数，改为在该函数中判断是否安装\n\n![image.png](http://upload-images.jianshu.io/upload_images/1094385-c070ef3ec671314c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**对于这个的总结就是该问题已经被官方在1.7.x的版本中进行修复。**\n**2018年1月**","tags":["Appium"]},{"title":"基于Appium+WDA+Python搭建IOS自动化测试全纪录(二):模拟器demo运行","url":"/2018/01/10/基于Appium+WDA+Python搭建IOS自动化测试全纪录(二):模拟器demo运行/","content":"\n[基于Appium+WDA+Python搭建IOS自动化测试全纪录(一):环境搭建\n](2018/01/10/基于Appium+WDA+Python搭建IOS自动化测试全纪录(一):环境搭建/)\n\n由于在跑这个demo之前，完全没有接触过移动端，就是连模拟器都不会启动的那种，所以步骤会说的比较啰嗦详细。\n\n#### 如何跑测试DEMO\n\n选定测试用例,github提供了测试的explame\n\n[https://github.com/appium/sample-code](https://github.com/appium/sample-code)\n\n#### 代码选择\n\n需要选择一个ios的APP，一个python脚本，如图选择的是app里面的TestApp，脚本选择的是python里面的ios_sample.py\n![image.png](http://upload-images.jianshu.io/upload_images/1094385-72611e445351abec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240);\n\n#### 模拟器运行\n\n因为是在模拟器上运行，所以要先把app放到模拟器上。一般来说通过在xcode中运行代码就可在模拟器中生产app，但是这个TestApp用例进去看了之后发现里面如图所示：\n![image.png](http://upload-images.jianshu.io/upload_images/1094385-9a55f95dc9c13a23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n所以就只能开启模拟器，然后把右边红框框生产的app拖放到模拟器里。\n想用命令行操作请看这里：[iOS-通过命令行安装.app到模拟器https://www.jianshu.com/p/8edf0b4ffb1b](https://www.jianshu.com/p/8edf0b4ffb1b)\n\n#### 配置更改\n\n现在app已经拖到模拟器里了，接下来启动python脚本，在执行脚本之前，还有一些配置需要更改。\n如下图所示，\n![WX20180110-205552@2x.png](http://upload-images.jianshu.io/upload_images/1094385-09190b669d9db567.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n首先说uuid的问题，每一个模拟器都有对应的uuid，这里在执行模拟器时用的是uuid，但是到了真机上，就变成了udid。\n\n**所以要拿到当前模拟器的uuid：**\n\n终端输入命令可得到想要的模拟器的字符串。\n```\ninstruments -s devices\n```\n![image.png](http://upload-images.jianshu.io/upload_images/1094385-b0756ac60e6e89f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n所以配置信息多添加一行\n```\n  'uuid':'xxxxxx'\n```\n\n更改后的配置如下：\n```\n          desired_capabilities={\n                'app': app,\n                'platformName': 'iOS',\n                'platformVersion': '11.2',//更改为当前模拟器的版本\n                'deviceName': 'iPhone 6s',//更改为当前模拟器的型号 \n                'uuid':'2EF911A2-CA9C-4D28-96EB-3DBC8DF39FA5'//更改为当前模拟器的uuid\n//经过测试发现在模拟器上uuid不是必须的，所以这里不填也可正常运行\n            })\n\n```\n#### 启动脚本\n先启动appium\n```\nappium\n```\n当控制台中显示如下，启动成功\n```\n[Appium] Welcome to Appium v1.7.2\n[Appium] Appium REST http interface listener started on 0.0.0.0:4723\n```\n\n\n\n在脚本所在目录下执行\n```\npython xxxx.py\n```\n（由于ios_sample.py的名字被用来测试别的了，所以给其改成了ios.py）\n![image.png](http://upload-images.jianshu.io/upload_images/1094385-9cbb164e39d74e91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如此，模拟器上测试demo运行成功！\n由于是在整个流程跑通之后回头做的纪录，所以可能有些地方纪录不完善，错误之处欢迎提出。\n\n------\n[Tbc]\n\n\n\n\n\n\n\n","tags":["Appium环境搭建"]},{"title":"基于Appium+WDA+Python搭建IOS自动化测试全纪录(一):环境搭建","url":"/2018/01/10/基于Appium+WDA+Python搭建IOS自动化测试全纪录(一):环境搭建/","content":"\n#### 写在前面\n计划将整个自动化搭建过程全部纪录一下，从环境搭建到模拟器跑demo，到真机跑demo  \n\n当前测试及环境跑通日期为2018.1月\n\n**本文要点:**\n* appium ios环境搭建  python环境搭建\n* Mac下 appium 1.7.2  python 2.7\n\n#### appium环境搭建\n* 安装Xcode，安装xcode-command-line-tools\n```\n终端中输入以下命令：xcode-select --install \n```\n* 安装brew\n\n    [官网地址](https://brew.sh/)\n\n    终端中输入\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n* 安装libimobiledevice\n```\nbrew install libimobiledevice --HEAD \n```\n* 安装carthage\n```\nbrew install carthage\n```\n* 安装node [官方的地址](https://nodejs.org/en/download/) 下载.pkg文件安装\n\n* 安装cnpm\n\n安装cnpm(由于某种原因,直接用npm下载安装会有好多网络问题，安装淘宝的cnpm要比npm好用)https://npm.taobao.org/\n\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n* 安装ios-deploy\n```\ncnpm install -g ios-deploy\n```\n* 安装xcpretty\n```\ngem install xcpretty\n```\n* 安装java环境\n\n(1)下载JAVA安装包：http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n\n(2)配置JAVA_HOME环境：\n\n在~/.bash_profile\n\n修改如下：\n```\n\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home   \n\nexport PATH=$JAVA_HOME/bin:$PATH \n\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n```\n* 安装appium，appium-doctor\n\n如果cnpm也卡了，想办法连vpn~\n```\ncnpm install -g appium\ncnpm install -g appium-doctor\n```\n这之后执行appium-doctor\n如果ios部分都变绿了就ok了。其中Android_Home,adb之类的变红是安卓的环境，对于ios没有什么影响。如果报错缺少了哪里的安装，直接搜安装方法就好。\n![image.png](http://upload-images.jianshu.io/upload_images/1094385-fec7f2f94bbfc472.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### Python环境搭建\n\n由于采用Python来写自动化测试脚本，因此需要搭建Python的相关环境\n\n采用了Python 2.7\n\n使用pip方式安装\n```\nbrew install pip\npip install lxml\n```\n安装Python-client\n```\npip install Appium-Python-Client\n```\n搭建或者运行过程中出现xxx not defined  之类的，可能是模块缺失，查一下是哪些模块  补一下就好，由于是在整个流程跑通之后回头做的纪录，所以可能有些地方纪录不完善，错误之处欢迎提出。\n\n那么环境搭建之后，通过启动app跑脚本即可达到流程跑通，所以接下来说如何跑脚本。\n\n----\n[Tbc]\n\n\n\n\n\n\n\n\n \n\n\n","tags":["Appium环境搭建"]}]